/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package ssg;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.util.HashMap;
import org.junit.jupiter.api.Test;
import ssg.tomlvaluetypewrapper.TomlArrayWrapper;
import ssg.tomlvaluetypewrapper.TomlBooleanWrapper;
import ssg.tomlvaluetypewrapper.TomlFloatWrapper;
import ssg.tomlvaluetypewrapper.TomlIntegerWrapper;
import ssg.tomlvaluetypewrapper.TomlLocalDateTimeWrapper;
import ssg.tomlvaluetypewrapper.TomlLocalDateWrapper;
import ssg.tomlvaluetypewrapper.TomlLocalTimeWrapper;
import ssg.tomlvaluetypewrapper.TomlOffsetDateTimeWrapper;
import ssg.tomlvaluetypewrapper.TomlStringWrapper;
import ssg.tomlvaluetypewrapper.TomlTableWrapper;
import ssg.tomlvaluetypewrapper.TomlValueTypeWrapper;

/**
 * App class test.
 */


@SuppressWarnings({"PMD.TooManyMethods", "PMD.LawOfDemeter", "PMD.AvoidStarImport"})
class TomlValueTest {

    @Test void createTomlFloatType() {
        TomlFloatWrapper f = new TomlFloatWrapper((float) 2.2);
        assertEquals("2.2", f.toString(), "Test Float assertion");
    }

    @Test void createTomlBooleanType() {
        TomlBooleanWrapper b = new TomlBooleanWrapper(true);
        assertEquals("true",b.toString(),"Test Bool assertion");
    }

    @Test void createTomlIntegerType() {
        TomlIntegerWrapper i = new TomlIntegerWrapper(3);
        assertEquals("3",i.toString(),"Test Integer assertion");
    }

    @Test void createTomlStringType() {
        TomlStringWrapper s = new TomlStringWrapper("YES");
        assertEquals("YES", s.toString(),"Test String assertion");
    }

    @Test void createTomlLdType() {
        TomlLocalDateWrapper a = new TomlLocalDateWrapper(LocalDate.now());
        assertEquals(LocalDate.now().toString(),a.toString(),"Test array assertion");
    }

    @Test void createTomlLdtType() {
        LocalDateTime dt = LocalDateTime.now();
        TomlLocalDateTimeWrapper i = new TomlLocalDateTimeWrapper(dt);
        assertEquals(dt.toString(),i.toString(),"Test Integer assertion");
    }

    @Test void createTomlLtType() {
        LocalTime t = LocalTime.now();
        TomlLocalTimeWrapper s = new TomlLocalTimeWrapper(t);
        assertEquals(t.toString(), s.toString(),"Test String assertion");
    }

    @Test void createTomlOffsetType() {
        OffsetDateTime odt = OffsetDateTime.now();
        TomlOffsetDateTimeWrapper s = new TomlOffsetDateTimeWrapper(odt);
        assertEquals(odt.toString(), s.toString(),"Test String assertion");
    }

    @Test void createTomlArrayType() {
        TomlValueTypeWrapper[] a = new TomlValueTypeWrapper[0];
        TomlArrayWrapper t = new TomlArrayWrapper(a);
        assertEquals("",t.toString(),"Test array assertion");
    }

    @Test void createTomlHashType() {
        HashMap<String, TomlValueTypeWrapper> a = new HashMap<>();
        a.put("un", new TomlIntegerWrapper(1));
        a.put("deux", new TomlIntegerWrapper(2));
        TomlTableWrapper b = new TomlTableWrapper(a);
        assertEquals("un : 1\ndeux : 2\n", b.toString(),"Test map assertion");
    }
}
